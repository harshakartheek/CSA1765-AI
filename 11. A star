import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f

def a_star_search(start, goal, heuristic, get_neighbors):
    open_list = []
    closed_list = set()
    start_node = Node(start, g=0, h=heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_list.add(current_node.state)

        for neighbor, cost in get_neighbors(current_node.state):
            if neighbor in closed_list:
                continue
            g = current_node.g + cost
            h = heuristic(neighbor, goal)
            neighbor_node = Node(neighbor, current_node, g, h)

            if all(neighbor_node.f < n.f for n in open_list if n.state == neighbor):
                heapq.heappush(open_list, neighbor_node)

    return None

def heuristic(state, goal):
    return abs(state - goal)

def get_neighbors(state):
    return [(state + 1, 1), (state - 1, 1)]  # Example for 1D problem

start = 1
goal = 10
path = a_star_search(start, goal, heuristic, get_neighbors)
print("Path:", path)
