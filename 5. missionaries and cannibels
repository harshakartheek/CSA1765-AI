from collections import deque

def is_valid(state):
    m1, c1, m2, c2 = state
    if m1 < 0 or c1 < 0 or m2 < 0 or c2 < 0:
        return False
    if (m1 > 0 and m1 < c1) or (m2 > 0 and m2 < c2):
        return False
    return True

def bfs(start, goal):
    queue = deque([(start, [])])
    visited = set()
    while queue:
        (state, path) = queue.popleft()
        if state == goal:
            return path + [state]
        if state in visited:
            continue
        visited.add(state)
        m1, c1, m2, c2 = state
        for m, c in [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]:
            if m1 >= m and c1 >= c:
                new_state = (m1 - m, c1 - c, m2 + m, c2 + c)
                if is_valid(new_state):
                    queue.append((new_state, path + [state]))
            if m2 >= m and c2 >= c:
                new_state = (m1 + m, c1 + c, m2 - m, c2 - c)
                if is_valid(new_state):
                    queue.append((new_state, path + [state]))
    return None

start_state = (3, 3, 0, 0)
goal_state = (0, 0, 3, 3)
solution = bfs(start_state, goal_state)

if solution:
    for step in solution:
        print(step)
else:
    print("No solution found.")
